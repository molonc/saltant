language: python
sudo: required

addons:
  postgresql: "10"
  apt:
    packages:
    - postgresql-10
    - postgresql-client-10

env:
  global:
    - PGPORT=5433

python:
  - "3.5"
  - "3.6"

services:
  - docker
  - postgresql
  - rabbitmq

install:
  # For Codecov
  - pip install codecov

  # Build Singularity from source
  - sudo apt-get install libarchive-dev
  - VERSION=2.5.2
  - wget https://github.com/singularityware/singularity/releases/download/$VERSION/singularity-$VERSION.tar.gz
  - tar xvf singularity-$VERSION.tar.gz
  - cd singularity-$VERSION
  - ./configure --prefix=/usr/local
  - make
  - sudo make install

  # Setup PostgreSQL DB
  - psql --command "CREATE DATABASE saltant;"
  - psql --command "CREATE USER johnsmith WITH PASSWORD 'johnsmithspassword';"
  - psql --command "ALTER ROLE johnsmith SET client_encoding TO 'utf8';"
  - psql --command "ALTER ROLE johnsmith SET default_transaction_isolation TO 'read committed';"
  - psql --command "ALTER ROLE johnsmith SET timezone TO 'UTC';"
  - psql --command "GRANT ALL PRIVILEGES ON DATABASE saltant TO johnsmith;"
  - psql --command "ALTER USER johnsmith CREATEDB;"

script:
  # Create an .env file
  - cp .env.example .env

  # Launch a Celery worker - first install requirements
  - pip install -r requirements-worker.txt

  # Then modify the .env so it has appropriate variables
  - mkdir $HOME/logs
  - mkdir $HOME/singularity_images
  - sed -i 's@IM_A_CELERY_WORKER=False@IM_A_CELERY_WORKER=True@' .env
  - sed -i 's@/path/to/workers/logs/here@'"$HOME"'/logs@' .env
  - sed -i 's@/path/to/workers/singularity/images/here@'"$HOME"'/singularity_images@' .env

  # Now run the Celery worker, make sure it starts, then kill it
  - celery worker -A saltant &
  - kill $!

  # Run saltant tests - first revert changes to .env and get full
  # requirements
  - sed -i 's@IM_A_CELERY_WORKER=True@IM_A_CELERY_WORKER=False@' .env
  - pip install -r requirements.txt

  # Run saltant tests
  - coverage run --source='.' manage.py check
  - coverage run --source='.' manage.py migrate
  - coverage run --source='.' manage.py test

after_success:
  - codecov
