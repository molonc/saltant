language: python
sudo: required

# The Travis builds error super-often, so reserve them only for pushes
# to master, pull requests, or manual triggers
branches:
  only:
  - master

addons:
  postgresql: "10"
  apt:
    packages:
    - postgresql-10
    - postgresql-client-10

env:
  global:
    - PGPORT=5433

python:
  - "3.5"
  - "3.6"
  - "3.7-dev"

services:
  - docker
  - postgresql
  - rabbitmq

install:
  # For Codecov
  - pip install codecov

  # Get Singularity
  - wget -O- http://neuro.debian.net/lists/trusty.us-ca.libre | sudo tee /etc/apt/sources.list.d/neurodebian.sources.list
  - sudo apt-key adv --recv-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9
  - sudo apt-get update -y
  - sudo apt-get install -y singularity-container

  # Setup PostgreSQL DB
  - psql --command "CREATE DATABASE saltant;"
  - psql --command "CREATE USER johnsmith WITH PASSWORD 'johnsmithspassword';"
  - psql --command "ALTER ROLE johnsmith SET client_encoding TO 'utf8';"
  - psql --command "ALTER ROLE johnsmith SET default_transaction_isolation TO 'read committed';"
  - psql --command "ALTER ROLE johnsmith SET timezone TO 'UTC';"
  - psql --command "GRANT ALL PRIVILEGES ON DATABASE saltant TO johnsmith;"
  - psql --command "ALTER USER johnsmith CREATEDB;"

script:
  # Create an .env file
  - cp .env.example .env

  # Launch a Celery worker - first install requirements
  - pip install -r requirements/requirements-worker-python3.txt

  # Then modify the .env so it has appropriate variables
  - mkdir $HOME/logs
  - mkdir $HOME/results
  - mkdir $HOME/temp
  - mkdir $HOME/singularity_images
  - sed -i 's@IM_A_CELERY_WORKER=False@IM_A_CELERY_WORKER=True@' .env
  - sed -i 's@/path/to/workers/logs/here@'"$HOME"'/logs@' .env
  - sed -i 's@/path/to/workers/results/here@'"$HOME"'/results@' .env
  - sed -i 's@/path/to/workers/temp/files/here@'"$HOME"'/temp@' .env
  - sed -i 's@/path/to/workers/singularity/images/here@'"$HOME"'/singularity_images@' .env

  # Now run the Celery worker, make sure it starts, then kill it
  - celery worker -A saltant &
  - kill $!

  # Run saltant tests - first revert changes to .env and get full
  # requirements
  - sed -i 's@IM_A_CELERY_WORKER=True@IM_A_CELERY_WORKER=False@' .env
  - pip install -r requirements/requirements-server-python3.txt

  # Run saltant tests
  - coverage run manage.py check
  - coverage run manage.py migrate
  - coverage run manage.py test

after_success:
  - codecov
